int descriptor_registry_${TYPE}_create( struct descriptor_registry_${TYPE}* registry, const char* name, struct descriptor_registry_ctx* ctx){
	assert(ctx);
	if(!ctx){
		return -1;
	}

	assert(registry);
	if(!registry){
		return -1;
	}
	auto map = reinterpret_cast<imb::descriptor_registry_map<float, int32_t>*>(ctx->internal);

	map->add_registry< ${TYPE} > ( std::string{name} );

	registry->internal = map->find_registry< ${TYPE} > ( std::string{name} );

	if(!registry->internal){
		return -1;
	}

	return 0;
}

size_t descriptor_registry_${TYPE}_add_var( struct descriptor_registry_${TYPE}* registry, ${TYPE} value ){
	auto ptr = reinterpret_cast< imb::keyed_registry< imb::var_location, ${TYPE} >* >(registry->internal);

	static size_t i = 0;

	return ptr->add_var(imb::var_location{i++, 1,1,1}, value);
}
